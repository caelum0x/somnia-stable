/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVault"
      | "deposit"
      | "getTotalBalance"
      | "getUserBalance"
      | "getVaults"
      | "owner"
      | "removeVault"
      | "stableVault"
      | "vaultList"
      | "vaults"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVaults", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stableVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface VaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): VaultManager;
  waitForDeployment(): Promise<this>;

  interface: VaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVault: TypedContractMethod<
    [_vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  getUserBalance: TypedContractMethod<[], [bigint], "view">;

  getVaults: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeVault: TypedContractMethod<
    [_vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stableVault: TypedContractMethod<[], [string], "view">;

  vaultList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  vaults: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVault"
  ): TypedContractMethod<[_vaultAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeVault"
  ): TypedContractMethod<[_vaultAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stableVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vaults"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
